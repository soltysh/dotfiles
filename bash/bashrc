# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
HISTIGNORE='ls:bg:fg:history'
HISTTIMEFORMAT='%F %T '

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Reset
Color_Off='\e[0m'

# Regular Colors
Black='\e[0;30m'
Red='\e[0;31m'
Green='\e[0;32m'
Yellow='\e[0;33m'
Blue='\e[1;34m'
Purple='\e[0;35m'
Cyan='\e[0;36m'
White='\e[0;37m'

function __prompt_command() {
    EXIT="$?"
    PS1=""

    # command history number in green if ok, red - if not
    if [ $EXIT -eq 0 ]; then PS1+="\[$Green\][\!]\[$Color_Off\] "; else PS1+="\[$Red\][\!]\[$Color_Off\] "; fi

    # basic information (user@host:path)
    PS1+="\[$Green\]\u\[$Color_Off\]@\[$Green\]\h\[$Color_Off\]:\[$Blue\]\w\[$Color_Off\] "

    # add git display to prompt
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" =~ not\ a\ git\ repo ]]; then
        # repository in unmodified state
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local Color_On=$Green
        # modified files already present in repository
        elif [[ "$git_status" =~ no\ changes\ added\ to\ commit ]]; then
            local Color_On=$Purple
        # new files in repository
        else
            local Color_On=$Red
        fi
        # brach info
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
        else
            # Detached HEAD. (branch=HEAD is a faster alternative.)
            branch="`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`"
        fi
        PS1+="\[$Color_On\][$branch]\[\e[0m\] "
    fi

    # add mercurial display to prompt
    local hg_status="`hg status 2>&1`"
    if ! [[ "$hg_status" =~ no\ repository\ found ]]; then
        # repository in unmodified state
        if [[ "$hg_status" == "" ]]; then
            local Color_On="\e[32m"
        # modified files already present in repository
        elif [[ "$hg_status" =~ ^M\  ]]; then
            local Color_On="\e[35m"
        # new files in repository
        else
            local Color_On="\e[31m"
        fi
        # branch info
        branch="`hg branch 2> /dev/null | awk '{ printf $1 }'`"
        bookmark="`hg bookmarks 2> /dev/null | awk ' /\*/ { printf $2 \"@\" }'`"
        PS1+="\[$Color_On\][$bookmark$branch]\[\e[0m\] "
    fi

    if [[ "$VIRTUAL_ENV" != "" ]]; then
        PS1+="\[\e[1;30m\]($(basename $VIRTUAL_ENV))\[\e[0m\] "
    fi

    # prompt $ or # for root
    PS1+='\n\$ '
}

PROMPT_COMMAND=__prompt_command

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    # -N gets rid of nasty apostrophe in file listing
    alias ls='ls --color=auto -N'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

function start_ssh_agent {
    SSH_ENV="$HOME/.ssh/environment"
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
}

# less customization
export LESS='-M -I -# 4'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias myip='ip -br -c a'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias dates='TZ="Australia/Brisbane" date; TZ="Asia/Shanghai" date; TZ="Europe/Warsaw" date; TZ="America/New_York" date; TZ="America/Los_Angeles" date'
alias oct-provision='oct provision remote all-in-one --os rhel --stage base --provider aws --name maszulik-dev'
alias oct-deprovision='oct deprovision'

# virutalenvwrapper configuration
export WORKON_HOME=$HOME/.virtualenvs
source /usr/bin/virtualenvwrapper.sh

# go settings
[[ -s "/home/maszulik/.gvm/scripts/gvm" ]] && source "/home/maszulik/.gvm/scripts/gvm"
goorigin() {
    gvm use go1.10.6
    export GOPATH=$HOME/workspace/origin
    cd $GOPATH/src/github.com/openshift/origin
}
gok8s() {
    gvm use go1.11.3
    export GOPATH=$HOME/workspace/k8s
    cd $GOPATH/src/k8s.io/kubernetes
}

# bash variables
export EDITOR=vim
export PATH=$HOME/usr/bin:$PATH

export LIBVIRT_DEFAULT_URI=qemu:///system
export KUBERNETES_PROVIDER=vagrant
export VAGRANT_DEFAULT_PROVIDER=libvirt


